name: Deploy VM1 (CI/CD)

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    # Variáveis de ambiente: Para o Deploy SSH (serão usadas pelo env.NOME na Action)
    env:
      VM_SSH_HOST: ${{ secrets.VM_SSH_HOST }}
      VM_SSH_USER: ${{ secrets.VM_SSH_USER }}
      VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}
      DOCKER_USER: ${{ secrets.DOCKER_USERNAME }} # Simplificando para uso no build/push
      PROJECT_DIR_REMOTO: $HOME/agireport-backend # Definindo a pasta remota

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Configuração de ferramentas
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 1. Configuração do Java e cache do Gradle
      - name: Set up Java 21 Environment
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      # 2. Login no Docker Hub (Passa Secrets diretamente)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ===============================================
      # 3. BUILDS: Compilação, Docker Build e Push
      # ===============================================

      # --- AUTH-SERVICE ---
      - name: Build and push auth-service
        working-directory: ./auth-service
        run: |
          chmod +x ./gradlew 
          ./gradlew build -x test 
          # O build do Docker deve referenciar a pasta de contexto (./auth-service)
          docker build -t ${{ env.DOCKER_USER }}/auth-service:latest .
          docker push ${{ env.DOCKER_USER }}/auth-service:latest

      # --- HISTORY-SERVICE ---
      - name: Build and push history-service
        working-directory: ./history-service
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test
          docker build -t ${{ env.DOCKER_USER }}/history-service:latest .
          docker push ${{ env.DOCKER_USER }}/history-service:latest

      # --- CUSTOMER-SERVICE (NOVO - MYSQL) ---
      - name: Build and push customer-service
        working-directory: ./customer-service
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test
          docker build -t ${{ env.DOCKER_USER }}/customer-service:latest .
          docker push ${{ env.DOCKER_USER }}/customer-service:latest

      # --- ANALYTIC-SERVICE (NOVO - Correção FROM jammy) ---
      - name: Build and push analytic-service
        working-directory: ./analytic-service
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test
          docker build -t ${{ env.DOCKER_USER }}/analytic-service:latest .
          docker push ${{ env.DOCKER_USER }}/analytic-service:latest

      # --- API-GATEWAY ---
      - name: Build and push api-gateway
        working-directory: ./api-gateway
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test
          docker build -t ${{ env.DOCKER_USER }}/api-gateway:latest .
          docker push ${{ env.DOCKER_USER }}/api-gateway:latest

      # ===============================================
      # 4. DEPLOY FINAL
      # ===============================================

      - name: Deploy to VM via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.VM_SSH_HOST }}
          username: ${{ env.VM_SSH_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            echo "Iniciando deploy na VM..."
            
            # Navega para o diretório de deploy
            cd ${{ env.PROJECT_DIR_REMOTO }}

            # Puxa as imagens mais recentes do Docker Hub
            docker compose pull

            # Recria e sobe os contêineres (ignora cache se houver)
            docker compose up -d

            echo "Deploy concluído."